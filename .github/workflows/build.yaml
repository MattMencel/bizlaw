name: Build and Push Docker Images

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service: [bizlaw]
        include:
          - service: bizlaw
            dockerfile: ./Dockerfile
            image: business-law-bizlaw

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.service }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.service }}-

      # Login to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata for the Docker image
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ matrix.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=long
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}

      # Build and push Docker image
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      # Move cache to avoid cache growth
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  # # Testing job that runs after both images are built
  # test:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   if: github.event_name != 'pull_request'

  #   permissions:
  #     packages: read

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Log in to GitHub Container Registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Set up test environment
  #       run: |
  #         # Create .env file for testing
  #         cat > .env << EOF
  #         GOOGLE_CLIENT_ID=test-client-id
  #         GOOGLE_CLIENT_SECRET=test-client-secret
  #         NEXTAUTH_SECRET=test-nextauth-secret
  #         JWT_SECRET=test-jwt-secret
  #         EOF

  #         # Create test docker-compose file that uses the built images
  #         cat > docker-compose.test.yml << EOF
  #         version: '3.8'
  #         services:
  #           api:
  #             image: ghcr.io/${{ github.repository_owner }}/business-law-api:sha-${{ github.sha }}
  #             environment:
  #               - NODE_ENV=development
  #               - DB_HOST=postgres
  #               - DB_PORT=5432
  #               - DB_USER=postgres
  #               - DB_PASSWORD=postgres
  #               - DB_NAME=business_law
  #             depends_on:
  #               postgres:
  #                 condition: service_healthy

  #           web:
  #             image: ghcr.io/${{ github.repository_owner }}/business-law-web:sha-${{ github.sha }}
  #             environment:
  #               - NEXT_PUBLIC_API_URL=http://api:3333
  #             ports:
  #               - "3000:3000"
  #             depends_on:
  #               - api

  #           postgres:
  #             image: postgres:15-alpine
  #             environment:
  #               - POSTGRES_USER=postgres
  #               - POSTGRES_PASSWORD=postgres
  #               - POSTGRES_DB=business_law
  #             volumes:
  #               - postgres_data:/var/lib/postgresql/data
  #             healthcheck:
  #               test: ["CMD-SHELL", "pg_isready -U postgres"]
  #               interval: 5s
  #               timeout: 5s
  #               retries: 5

  #         volumes:
  #           postgres_data:
  #         EOF

  #     - name: Start the stack
  #       run: |
  #         docker-compose -f docker-compose.test.yml pull
  #         docker-compose -f docker-compose.test.yml up -d
  #         sleep 30  # Give services time to start

  #     - name: Check services health
  #       run: |
  #         docker-compose -f docker-compose.test.yml ps
  #         docker-compose -f docker-compose.test.yml logs
  #         curl -f http://localhost:3000 || (docker-compose -f docker-compose.test.yml logs && exit 1)
