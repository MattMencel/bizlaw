# frozen_string_literal: true

# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a
# newer version of cucumber-rails. Consider adding your own code to a new file
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.

require "cucumber/rails"
require "rack/test"
require "capybara/cucumber"
require "email_spec"
require "email_spec/cucumber"
require "timecop"
require "factory_bot"
require "rspec/mocks"

World(Rack::Test::Methods)
World(FactoryBot::Syntax::Methods)
World(RSpec::Mocks::ExampleMethods)

# Capybara defaults to CSS3 selectors rather than XPath.
# If you'd prefer to use XPath, just uncomment this line and adjust any
# selectors in your step definitions to use the XPath syntax.
# Capybara.default_selector = :xpath

# By default, any exception happening in your Rails application will bubble up
# to Cucumber so that your scenario will fail. This is a different from how
# your application behaves in the production environment, where an error page will
# be rendered instead.
#
# Sometimes we want to override this default behaviour and allow Rails to rescue
# exceptions and display an error page (just like when the app is running in production).
# Typical scenarios where you want to do this is when you test your error pages.
# There are two ways to allow Rails to rescue exceptions:
#
# 1) Tag your scenario (or feature) with @allow-rescue
#
# 2) Set the value below to true. Beware that doing this globally is not
# recommended as it will mask a lot of errors for you!
#
ActionController::Base.allow_rescue = false

# Remove/comment out the lines below if your app doesn't have a database.
# For some databases (like MongoDB and CouchDB) you may need to use :truncation instead.
begin
  DatabaseCleaner.strategy = :transaction
rescue NameError
  raise "You need to add database_cleaner to your Gemfile (in the :test group) if you wish to use it."
end

# You may also want to configure DatabaseCleaner to use different strategies for certain features and scenarios.
# See the DatabaseCleaner documentation for details. Example:
#
#   Before('@no-txn,@selenium,@culerity,@celerity,@javascript') do
#     # { except: [:widgets] } may not do what you expect here
#     # as Cucumber::Rails::Database.javascript_strategy overrides
#     # this setting.
#     DatabaseCleaner.strategy = :truncation
#   end
#
#   Before('not @no-txn', 'not @selenium', 'not @culerity', 'not @celerity', 'not @javascript') do
#     DatabaseCleaner.strategy = :transaction
#   end
#

# Possible values are :truncation and :transaction
# The :transaction strategy is faster, but might give you threading problems.
# See https://github.com/cucumber/cucumber-rails/blob/master/features/choose_javascript_database_strategy.feature
Cucumber::Rails::Database.javascript_strategy = :truncation

# Configure OmniAuth test mode
OmniAuth.config.test_mode = true

# Mock Google OAuth2 response
OmniAuth.config.mock_auth[:google_oauth2] = OmniAuth::AuthHash.new(
  provider: "google_oauth2",
  uid: "123456789",
  info: {
    email: "test@example.com",
    first_name: "Test",
    last_name: "User",
    image: "https://example.com/photo.jpg"
  },
  credentials: {
    token: "mock_token",
    refresh_token: "mock_refresh_token",
    expires_at: Time.current.to_i + 3600,
    expires: true
  }
)

# Include Warden test helpers
World(Warden::Test::Helpers)
Warden.test_mode!

After { Warden.test_reset! }

# Include EmailSpec helpers and matchers
World(EmailSpec::Helpers)
World(EmailSpec::Matchers)

# Clear emails before each scenario
Before do
  reset_mailer
end

# Reset Timecop after each scenario
After do
  Timecop.return
end

# Setup and teardown RSpec mocks
Before do
  RSpec::Mocks.setup
end

After do
  RSpec::Mocks.verify
  RSpec::Mocks.teardown
end

Before("@oauth_failure") do
  OmniAuth.config.mock_auth[:google_oauth2] = :invalid_credentials
end

def app
  Rails.application
end
